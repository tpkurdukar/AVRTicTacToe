
SPI74HC595.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000184  00000218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000184  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  0080010e  0080010e  00000226  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000226  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000258  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008ec  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007aa  00000000  00000000  00000bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000038c  00000000  00000000  00001366  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  000016f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000405  00000000  00000000  00001748  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000011c  00000000  00000000  00001b4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001c69  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e8       	ldi	r30, 0x84	; 132
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 31       	cpi	r26, 0x17	; 23
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 84 00 	call	0x108	; 0x108 <main>
  9e:	0c 94 c0 00 	jmp	0x180	; 0x180 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <USART_putchar>:
    }
}

void USART_putchar(unsigned char c) {
	// Note: code taken from datasheet of atmega328p
	while(!(UCSR0A & (1 << UDRE0))); // poll, wait for empty transmit buffer
  a6:	e0 ec       	ldi	r30, 0xC0	; 192
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	90 81       	ld	r25, Z
  ac:	95 ff       	sbrs	r25, 5
  ae:	fd cf       	rjmp	.-6      	; 0xaa <USART_putchar+0x4>
	
	// once data is placed in UDR0, it transmits automatically
	UDR0 = c;
  b0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  b4:	08 95       	ret

000000b6 <USART_init>:
}

void USART_init() {
	UBRR0H = (BRC >> 8);
  b6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = BRC; // load baud rate
  ba:	87 e6       	ldi	r24, 0x67	; 103
  bc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	
	UCSR0B = (1 << TXEN0); // enable transmitter
  c0:	88 e0       	ldi	r24, 0x08	; 8
  c2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	UCSR0C = (1 << UCSZ00) | (1 << UCSZ01); // set number of bits per frame to 8 (1 char)
  c6:	86 e0       	ldi	r24, 0x06	; 6
  c8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
  cc:	08 95       	ret

000000ce <master_transmit>:
	
}

void master_transmit(uint16_t d) {
  ce:	28 e0       	ldi	r18, 0x08	; 8
	uint8_t upper = 0x0, lower = 0x0;
  d0:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t k;
	for(k = 0; k < 8; ++k) {
		upper <<= 1;
  d2:	33 0f       	add	r19, r19
		if(d & 0x8000) {
  d4:	99 23       	and	r25, r25
  d6:	0c f4       	brge	.+2      	; 0xda <master_transmit+0xc>
			upper |= 1;
  d8:	31 60       	ori	r19, 0x01	; 1
		}
		d <<= 1;
  da:	88 0f       	add	r24, r24
  dc:	99 1f       	adc	r25, r25
  de:	21 50       	subi	r18, 0x01	; 1
}

void master_transmit(uint16_t d) {
	uint8_t upper = 0x0, lower = 0x0;
	uint8_t k;
	for(k = 0; k < 8; ++k) {
  e0:	c1 f7       	brne	.-16     	; 0xd2 <master_transmit+0x4>
  e2:	28 e0       	ldi	r18, 0x08	; 8
  e4:	40 e0       	ldi	r20, 0x00	; 0
			upper |= 1;
		}
		d <<= 1;
	}
	for(k = 0; k < 8; ++k) {
		lower <<= 1;
  e6:	44 0f       	add	r20, r20
		if(d & 0x8000) {
  e8:	99 23       	and	r25, r25
  ea:	0c f4       	brge	.+2      	; 0xee <master_transmit+0x20>
			lower |= 1;
  ec:	41 60       	ori	r20, 0x01	; 1
		}
		d <<= 1;
  ee:	88 0f       	add	r24, r24
  f0:	99 1f       	adc	r25, r25
  f2:	21 50       	subi	r18, 0x01	; 1
		if(d & 0x8000) {
			upper |= 1;
		}
		d <<= 1;
	}
	for(k = 0; k < 8; ++k) {
  f4:	c1 f7       	brne	.-16     	; 0xe6 <master_transmit+0x18>
			lower |= 1;
		}
		d <<= 1;
	}
	
	SPDR = upper; /* Writing to SPDR begins transmission */
  f6:	3e bd       	out	0x2e, r19	; 46
	/*
	while(!flag);
	flag = 0;
	*/
	
	while(!(SPSR & (1 << SPIF)));
  f8:	0d b4       	in	r0, 0x2d	; 45
  fa:	07 fe       	sbrs	r0, 7
  fc:	fd cf       	rjmp	.-6      	; 0xf8 <master_transmit+0x2a>
	SPDR = lower;
  fe:	4e bd       	out	0x2e, r20	; 46
	
	while(!(SPSR & (1 << SPIF)));
 100:	0d b4       	in	r0, 0x2d	; 45
 102:	07 fe       	sbrs	r0, 7
 104:	fd cf       	rjmp	.-6      	; 0x100 <master_transmit+0x32>
	
	/*
	while(!flag);
	flag = 0;
	*/
}
 106:	08 95       	ret

00000108 <main>:
{
	/* This sets the SS' pin on the atmega328p as output
	 * Absolutely necessary step, despite SS' not being used here. If it is configured as input and picks up some noise from the programmer,
	 * master mode will turn off and the system thinks it is trying to receive something.
	 */
	DDRB = (1 << PORTB2);
 108:	84 e0       	ldi	r24, 0x04	; 4
 10a:	84 b9       	out	0x04, r24	; 4
	
	USART_init();
 10c:	0e 94 5b 00 	call	0xb6	; 0xb6 <USART_init>
	stdout = &mystdout;
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	91 e0       	ldi	r25, 0x01	; 1
 114:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <__iob+0x3>
 118:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <__iob+0x2>
	
    /* Setup for SPI */
	SPCR = (1 << SPIE) | (1 << SPE) | (1 << MSTR); /* Enable SPI interrupts, enable SPI, set as master */
 11c:	80 ed       	ldi	r24, 0xD0	; 208
 11e:	8c bd       	out	0x2c, r24	; 44
	/* Note: CPOL and CPHA set so that the leading edge of SCK is the rising edge, and sampling occurs on rising edge */
	/* Using default SCK frequency of F_CPU / 4 */
	
	DDRC = (1 << CS); /* CS for 74hc595 is on DDRC. Just using a GPIO pin here */
 120:	82 e0       	ldi	r24, 0x02	; 2
 122:	87 b9       	out	0x07, r24	; 7
	DDRB |= (1 << MOSI) | (1 << SCK); /* SPI is on DDRB */
 124:	84 b1       	in	r24, 0x04	; 4
 126:	88 62       	ori	r24, 0x28	; 40
 128:	84 b9       	out	0x04, r24	; 4
	//sei(); /* Enable interrupts */
	
    while (1) 
    {
		if(i > 8) i = 0;
		data = 1 << i;
 12a:	c1 e0       	ldi	r28, 0x01	; 1
 12c:	d0 e0       	ldi	r29, 0x00	; 0
	DDRB |= (1 << MOSI) | (1 << SCK); /* SPI is on DDRB */
	//sei(); /* Enable interrupts */
	
    while (1) 
    {
		if(i > 8) i = 0;
 12e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <i>
 132:	89 30       	cpi	r24, 0x09	; 9
 134:	10 f0       	brcs	.+4      	; 0x13a <main+0x32>
 136:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <i>
		data = 1 << i;
 13a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <i>
 13e:	9e 01       	movw	r18, r28
 140:	02 c0       	rjmp	.+4      	; 0x146 <main+0x3e>
 142:	22 0f       	add	r18, r18
 144:	33 1f       	adc	r19, r19
 146:	8a 95       	dec	r24
 148:	e2 f7       	brpl	.-8      	; 0x142 <main+0x3a>
 14a:	30 93 0f 01 	sts	0x010F, r19	; 0x80010f <__data_end+0x1>
 14e:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <__data_end>
		++i;
 152:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <i>
 156:	8f 5f       	subi	r24, 0xFF	; 255
 158:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <i>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15c:	3f ef       	ldi	r19, 0xFF	; 255
 15e:	83 ec       	ldi	r24, 0xC3	; 195
 160:	99 e0       	ldi	r25, 0x09	; 9
 162:	31 50       	subi	r19, 0x01	; 1
 164:	80 40       	sbci	r24, 0x00	; 0
 166:	90 40       	sbci	r25, 0x00	; 0
 168:	e1 f7       	brne	.-8      	; 0x162 <main+0x5a>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <main+0x64>
 16c:	00 00       	nop
		_delay_ms(200);
		PORTC &= ~(1 << CS); /* Chip select set to low for 74hc595 */
 16e:	41 98       	cbi	0x08, 1	; 8
		master_transmit(data);
 170:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 174:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__data_end+0x1>
 178:	0e 94 67 00 	call	0xce	; 0xce <master_transmit>
		PORTC |= (1 << CS);
 17c:	41 9a       	sbi	0x08, 1	; 8
		
    }
 17e:	d7 cf       	rjmp	.-82     	; 0x12e <main+0x26>

00000180 <_exit>:
 180:	f8 94       	cli

00000182 <__stop_program>:
 182:	ff cf       	rjmp	.-2      	; 0x182 <__stop_program>
